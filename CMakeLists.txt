cmake_minimum_required(VERSION 2.8 FATAL_ERROR)
project(GWLocalServer)
if(MSVC11)
  SET(CMAKE_GENERATOR_TOOLSET "v110_xp" CACHE STRING "Name of generator toolset." FORCE)
endif()
if(MSVC12)
  SET(CMAKE_GENERATOR_TOOLSET "v120_xp" CACHE STRING "Name of generator toolset." FORCE)
endif()
if(UNIX)
  SET(CMAKE_BUILD_TYPE "Release" CACHE STRING "Choose the type of build, options are: None(CMAKE_CXX_FLAGS or CMAKE_C_FLAGS used) Debug Release RelWithDebInfo MinSizeRel." FORCE)
endif()
set(CMAKE_INSTALL_PREFIX "${PROJECT_SOURCE_DIR}")
set(ROOT_SOURCE_DIR "${PROJECT_SOURCE_DIR}")
if(WIN32)
  set(COMMON_INCLUDE_DIR "${ROOT_SOURCE_DIR}/dep/include/WIN32/libevent")
  set(COMMON_LIBRARY_DIR "${ROOT_SOURCE_DIR}/dep/lib/WIN32")
else()
  set(COMMON_INCLUDE_DIR "${ROOT_SOURCE_DIR}/dep/include/i386")
  set(COMMON_LIBRARY_DIR "${ROOT_SOURCE_DIR}/dep/lib/i386")
endif()
set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${ROOT_SOURCE_DIR}/cmake")
include(AddTarget)
include(AutoFiles)
if(WIN32)
  set(CMAKE_RUNTIME_OUTPUT_DIRECTORY "${PROJECT_SOURCE_DIR}/bin")
else()
  set(CMAKE_RUNTIME_OUTPUT_DIRECTORY "${PROJECT_SOURCE_DIR}/bin/${CMAKE_BUILD_TYPE}")
endif()
if(WIN32)
  add_definitions(-D_CRT_SECURE_NO_WARNINGS)
else()
  add_definitions(-Wno-unused-result)
endif()
add_subdirectory(src)
